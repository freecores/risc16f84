<b><font size=+2 face="Helvetica, Arial"color=#bf0000>Project: risc16f84</font></b><p><table  align=center border=1 cellPadding=2 cellSpacing=0 width="100%" valign="top"><tbody><tr bgcolor=#bbccff>    <td align=center valign=center>
<a href="./index.shtml">Overview</a>               |
<a href="./people.shtml">People</a>               |
<a href="./documentation.shtml">Documentation</a>               |
<a href="./download.shtml">Download</a>               |
<a href="mailto:cores@opencores.org">OpenCores Mail list</a>               |
<a href="mailto:jclaytons@earthlink.net">Contact me</a>    </td></tr></tbody></table>
<p><center><font  color="#bf0000" size=+3> <b>Download</b></font></center></p>
<p><font color="#2080bf" size=+1> <b>Allright, here are "the goods!"</b></font></p>
<font >
<p>Downloads:</p>
<p></p>
<p><a href="./risc16f84_clk2x.v">risc16f84_clk2x.v</a>.  This file contains the stripped down 16f84 microcontroller: 1 interrupt input, no watch dog timer, no port A and B, plus the Auxiliary bus (which handles much more than Ports A and B), plus it runs at 2 clock cycles per instruction.
<p><a href="./risc16f84_small.v">risc16f84_small.v</a>.  This file contains the 16f84 Verilog code without EEPROM interface, with only a single interrupt input.
<p><a href="./risc16f84_lite.v">risc16f84_lite.v</a>.  This file contains the 16f84 Verilog code without EEPROM interface.
<p><a href="./risc16f84.v">risc16f84.v</a>.  This file contains the full-blown 16f84 Verilog code.
</p></font>
<br><br>
<a href="./b11_risc16f84_05_07_02.zip">b11_risc16f84_05_07_02.zip</a>.
This file contains an example of the risc16f84_clk2x module in use.  The top level module is "top.v"  It uses tri-state buffers for data buses, except for the Xilinx DPRAM used to implement the 512 byte register file, which has separate data in and data out buses.  There is support for hardware breakpoints, single stepping and resetting the processor through "rs232_syscon" commands given through a serial port (see opencores project at <a href="http://www.opencores.org/cores/rs232_syscon">rs232_syscon</a>).<br><br>
<p>This entire project fits into a Xilinx XC2S200 chip, taking up only about 950 slices or so, and all 14 of the DPRAM blocks (9 of the DPRAMS for a "pixel" memory for a 128 by 96 pixel display that I implemented with this project.  You can remove these from the project, add new registers, create new peripherals -- whatever you like.)
<p>NOTE: In order to get these examples to work on your own board, you will need to generate a correct BAUD clock on your board -- see the file "serial.v" for details.  Also, you will need some "level translating" circuit to change the LVTTL level signals coming out of the Xilinx chip into RS232 levels for connection to your computer's serial port.  Be sure to re-assign the IO constraints to match the desired pinouts on your board, and add debug outputs if you like, so that you can view what is happening on a logic analyzer...  Or, you could also simulate these modules!
</p></font>

